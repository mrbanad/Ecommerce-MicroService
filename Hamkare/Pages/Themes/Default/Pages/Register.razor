@* @page "/register" *@
@* @inject AuthenticationHttpClient Http *@
@* *@
@* <PageTitle>Register</PageTitle> *@
@* *@
@* <h1>Register</h1> *@
@* *@
@* @if (!succeeded) *@
@* { *@
@*     <EditForm Model="@userRegisterDTO" OnValidSubmit="@HandleValidSubmit"> *@
@*         <CustomValidation @ref="customValidation" /> *@
@*         <DataAnnotationsValidator /> *@
@*         <ValidationSummary /> *@
@* *@
@*         <div class="mb-3"> *@
@*             <InputText class="form-control" id="Email" @bind-Value="userRegisterDTO.Email" placeholder="Email" /> *@
@*         </div> *@
@* *@
@*         <div class="mb-3"> *@
@*             <InputText class="form-control" id="Password" @bind-Value="userRegisterDTO.Password" placeholder="Password" /> *@
@*         </div> *@
@* *@
@*         <div class="mb-3"> *@
@*             <InputText class="form-control" id="ConfirmPassword" @bind-Value="userRegisterDTO.ConfirmPassword" placeholder="Confirm password" /> *@
@*         </div> *@
@* *@
@*         @if (!registering) *@
@*         { *@
@*             <button class="btn btn-primary" type="submit">Submit</button> *@
@*         } *@
@*         else *@
@*         { *@
@*             <p> *@
@*                 Registering... *@
@*             </p> *@
@*         } *@
@*     </EditForm> *@
@* } *@
@* else *@
@* { *@
@*     <p> *@
@*         Registration successful! <a href="login">Click here to login</a>. *@
@*     </p> *@
@* } *@
@* *@
@* @code { *@
@*     private UserRegisterDTO userRegisterDTO = new(); *@
@*     private CustomValidation? customValidation; *@
@*     private bool registering; *@
@*     private bool succeeded; *@
@* *@
@*     private async Task HandleValidSubmit() *@
@*     { *@
@*         registering = true; *@
@* *@
@*         var result = await Http.RegisterUser(userRegisterDTO); *@
@* *@
@*         if (result.Succeeded) *@
@*         { *@
@*             succeeded = true; *@
@*         } *@
@*         else *@
@*         { *@
@*             customValidation?.ClearErrors(); *@
@*             var errors = new Dictionary<string, List<string>>(); *@
@*             errors.Add("", result.Errors.ToList()); *@
@*             customValidation?.DisplayErrors(errors); *@
@*         } *@
@* *@
@*         registering = false; *@
@*     } *@
@* } *@